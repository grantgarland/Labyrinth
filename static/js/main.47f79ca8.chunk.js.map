{"version":3,"sources":["Labyrinth/Node.jsx","Labyrinth/algorithms/dijkstra.js","Labyrinth/Grid.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","sortNodesByDistance","unvisitedNodes","sort","nodeA","nodeB","distance","updateUnvisitedNeighbors","node","grid","unvisitedNeighbors","neighbors","push","length","filter","neighbor","isVisited","getUnvisitedNeighbors","previousNode","getAllNodes","nodes","Grid","visitedNodesInOrder","undefined","nodesInShortestPathOrder","initializeMaze","state","relevantIds","object","forEach","r","c","setState","possibleRows","number","possibleCols","i","j","randomRowIndex","Math","floor","random","randomColIndex","includes","mouseIsPressed","buildGrid","getInitialGrid","document","getElementById","newGrid","getNewGridWithWallToggled","setTimeout","animateShortestPath","startNode","finishNode","closestNode","shift","Infinity","dijkstra","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","resetGrid","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47f79ca8.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      col,\n      isFinish,\n      isStart,\n      isWall,\n      onMouseDown,\n      onMouseEnter,\n      onMouseUp,\n      row,\n    } = this.props;\n    const extraClassName = isFinish\n      ? 'node-finish'\n      : isStart\n      ? 'node-start'\n      : isWall\n      ? 'node-wall'\n      : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onMouseDown={() => onMouseDown(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n        onMouseUp={() => onMouseUp()}></div>\n    );\n  }\n}\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\n// in which they were visited. Also makes nodes point back to their\n// previous node, effectively allowing us to compute the shortest path\n// by backtracking from the finish node.\nexport function dijkstra(grid, startNode, finishNode) {\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const unvisitedNodes = getAllNodes(grid);\n  while (!!unvisitedNodes.length) {\n    sortNodesByDistance(unvisitedNodes);\n    const closestNode = unvisitedNodes.shift();\n    // If we encounter a wall, we skip it.\n    if (closestNode.isWall) continue;\n    // If the closest node is at a distance of infinity,\n    // we must be trapped and should therefore stop.\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n    closestNode.isVisited = true;\n    visitedNodesInOrder.push(closestNode);\n    if (closestNode === finishNode) return visitedNodesInOrder;\n    updateUnvisitedNeighbors(closestNode, grid);\n  }\n}\n\nexport function resetNodes(grid) {\n  const allNodes = getAllNodes(grid);\n  allNodes.forEach(node => {\n    node.isVisited = false;\n  });\n}\n\nfunction sortNodesByDistance(unvisitedNodes) {\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\n}\n\nfunction updateUnvisitedNeighbors(node, grid) {\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\n  for (const neighbor of unvisitedNeighbors) {\n    neighbor.distance = node.distance + 1;\n    neighbor.previousNode = node;\n  }\n}\n\nfunction getUnvisitedNeighbors(node, grid) {\n  const neighbors = [];\n  const {col, row} = node;\n  if (row > 0) neighbors.push(grid[row - 1][col]);\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  if (col > 0) neighbors.push(grid[row][col - 1]);\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  return neighbors.filter(neighbor => !neighbor.isVisited);\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the dijkstra method above.\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}\n","import React, {Component} from 'react';\nimport Node from './Node';\nimport {\n  dijkstra,\n  getNodesInShortestPathOrder,\n  resetNodes,\n} from './algorithms/dijkstra';\n\nimport './Grid.css';\n\nconst START_NODE_ROW = 5;\nconst START_NODE_COL = 10;\nconst FINISH_NODE_ROW = 15;\nconst FINISH_NODE_COL = 40;\n\nexport default class Grid extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n    };\n  }\n  visitedNodesInOrder = undefined;\n  nodesInShortestPathOrder = undefined;\n\n  componentDidMount() {\n    this.buildGrid();\n  }\n\n  buildGrid() {\n    const grid = getInitialGrid();\n    this.setState({grid}, () => this.initializeMaze());\n  }\n\n  resetGrid() {\n    resetNodes(this.state.grid);\n    this.buildGrid();\n\n    if (this.visitedNodesInOrder) {\n      for (let i = 0; i <= this.visitedNodesInOrder.length; i++) {\n        const node = this.visitedNodesInOrder[i];\n        if (node && !node.isStart && !node.isFinish) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node';\n        } else if (node && node.isStart) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-start';\n        } else if (node) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-finish';\n        }\n      }\n    }\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    this.visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    this.nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(\n      this.visitedNodesInOrder,\n      this.nodesInShortestPathOrder,\n    );\n  }\n\n  initializeMaze = () => {\n    const {grid} = this.state;\n    let relevantIds = [grid[0], grid[grid.length]];\n    if (grid.object) relevantIds.push(grid.object);\n    // Draw the maze border\n    grid.forEach(row => {\n      row.forEach(node => {\n        let r = node.row;\n        let c = node.col;\n        if (r === 0 || c === 0 || r === 19 || c === 49) {\n          node.isWall = true;\n          this.setState({grid});\n        }\n      });\n    });\n    // Draw maze internal walls\n    let possibleRows = [];\n    for (let number = 0; number <= 30; number += 2) {\n      possibleRows.push(number);\n    }\n    let possibleCols = [];\n    for (let number = 1; number <= 50; number += 2) {\n      possibleCols.push(number);\n    }\n\n    grid.forEach((row, i) => {\n      row.forEach((node, j) => {\n        let randomRowIndex = Math.floor(Math.random() * possibleRows.length);\n        let randomColIndex = Math.floor(Math.random() * possibleCols.length);\n\n        if (\n          (possibleRows.includes(node.row) && node.row % randomRowIndex > 0) ||\n          node.row % randomRowIndex < 2\n        ) {\n          if (\n            (possibleCols.includes(node.col) &&\n              node.col % randomColIndex > 1) ||\n            node.col % randomColIndex < 2\n          ) {\n            node.isWall = true;\n            this.setState({grid});\n          }\n        }\n      });\n    });\n  };\n\n  render() {\n    const {grid, mouseIsPressed} = this.state;\n\n    return (\n      <>\n        <button className=\"mazeButton\" onClick={() => this.visualizeDijkstra()}>\n          Navigate Labyrinth\n        </button>\n        <button className=\"resetButton\" onClick={() => this.resetGrid()}>\n          Reset\n        </button>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n","import React from 'react';\nimport './App.css';\nimport Grid from './Labyrinth/Grid';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}